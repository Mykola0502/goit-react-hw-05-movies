{"version":3,"file":"static/js/417.b2052fdb.chunk.js","mappings":"mSAEaA,EAAOC,EAAAA,GAAAA,GAAH,4HASJC,EAAOD,EAAAA,GAAAA,GAAH,mJAQJE,EAAOF,EAAAA,GAAAA,EAAH,8GAOJG,EAAYH,EAAAA,GAAAA,EAAH,4CAITI,EAAiBJ,EAAAA,GAAAA,KAAH,6C,mBCwC3B,EA7Da,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAwBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBJ,GAAW,GAFK,UAGQK,EAAAA,EAAAA,IAAeR,GAHvB,OAGVS,EAHU,OAIhBV,EAAQU,GAJQ,gDAMhBC,QAAQC,IAAR,MACAN,EAAS,KAAMO,SAPC,yBAShBT,GAAW,GATK,4EAAH,qDAajBI,GACD,GAAE,CAACP,KAKF,gCACGE,IAAW,SAACW,EAAA,EAAD,IACXT,IACC,0BACGA,GACD,4FAGHN,IACC,SAACP,EAAD,UACGO,EAAKgB,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACR,UAACzB,EAAD,YACE,gBACE0B,IACEH,EAAY,yCAC0BA,GAClCI,EAENC,IAAKJ,KAEP,SAACvB,EAAD,UAAOuB,KACP,UAACtB,EAAD,YACE,SAACC,EAAD,yBADF,IAC+CsB,OAXtCH,EADH,QAoBnB,C,mMClEDO,EAAAA,EAAAA,SAAAA,QAAyB,gCAIlB,IAAMC,EAAa,mCAAG,6GAEFD,EAAAA,EAAAA,IAAU,qBAAsB,CACrDE,OAAQ,CACNC,QAAS,sCAJY,cAEnBC,EAFmB,yBAQlBA,EAASC,MARS,gCAWzBjB,QAAQC,IAAR,MAXyB,yDAAH,qDAiBbiB,EAAU,mCAAG,WAAMC,GAAN,gGAECP,EAAAA,EAAAA,IAAA,gBAAmBO,GAAM,CAC9CL,OAAQ,CACNC,QAAS,mCACTK,SAAU,WALQ,cAEhBJ,EAFgB,yBAQfA,EAASC,MARM,sCAUhB,IAAII,MAAJ,MAVgB,yDAAH,sDAgBVC,EAAgB,mCAAG,WAAMC,GAAN,gGAELX,EAAAA,EAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,QAAS,mCACTK,SAAU,QACVG,MAAM,GAAD,OAAKA,MANc,cAEtBP,EAFsB,yBAWrBA,EAASC,KAAKO,SAXO,sCAa5BxB,QAAQC,IAAR,MACM,IAAIoB,MAAJ,MAdsB,yDAAH,sDAkBhBvB,EAAc,mCAAG,WAAMqB,GAAN,gGAEHP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,YAAiC,CACtDL,OAAQ,CACNC,QAAS,mCACTK,SAAU,WALY,cAEpBJ,EAFoB,yBAQnBA,EAASC,KAAK7B,MARK,sCAU1BY,QAAQC,IAAR,MACM,IAAIoB,MAAJ,MAXoB,yDAAH,sDAedI,EAAiB,mCAAG,WAAMN,GAAN,gGAENP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,YAAiC,CACtDL,OAAQ,CACNC,QAAS,mCACTK,SAAU,QACVM,KAAM,KANmB,cAEvBV,EAFuB,yBAStBA,EAASC,KAAKO,SATQ,sCAW7BxB,QAAQC,IAAR,MACM,IAAIoB,MAAJ,MAZuB,yDAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  /* padding: 8px 0; */\n\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  max-width: 100px;\n  /* height: auto; */\n  /* display: flex; */\n  /* align-items: center; */\n  /* padding: 5px 0; */\n`;\n\nexport const Name = styled.p`\n  margin-top: 10px;\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const Character = styled.p`\n  font-size: 14px;\n`;\n\nexport const CharacterTitle = styled.span`\n  font-weight: 500;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieCast } from 'services/api';\n\nimport NoImage from 'images/noImage.png';\nimport { Character, CharacterTitle, Item, List, Name } from './Cast.styled';\nimport { Loader } from 'components/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // const location = useLocation();\n  // console.log(location.state);\n\n  useEffect(() => {\n    const getCastById = async () => {\n      try {\n        setLoading(true);\n        const movieCast = await fetchMovieCast(movieId);\n        setCast(movieCast);\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCastById();\n  }, [movieId]);\n\n  //   console.log(cast);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && (\n        <h2>\n          {error}\n          <p>Unable to open the page. Please try again later. ðŸ˜¢</p>\n        </h2>\n      )}\n      {cast && (\n        <List>\n          {cast.map(({ cast_id, profile_path, name, character }) => (\n            <Item key={cast_id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : NoImage\n                }\n                alt={name}\n              />\n              <Name>{name}</Name>\n              <Character>\n                <CharacterTitle>Character:</CharacterTitle> {character}\n              </Character>\n            </Item>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// const controller = new AbortController();\n\nexport const fetchTrending = async () => {\n  try {\n    const response = await axios.get('trending/movie/day', {\n      params: {\n        api_key: '9e9058c72b8ee0828aa8b191435a8696',\n        // signal: controller.signal,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    // throw new Error(error.message);\n    console.log(error);\n  }\n};\n\n// controller.abort();\n\nexport const fetchMovie = async id => {\n  try {\n    const response = await axios.get(`movie/${id}`, {\n      params: {\n        api_key: '9e9058c72b8ee0828aa8b191435a8696',\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(error);\n    // console.log(error);\n    // return error;\n  }\n};\n\nexport const fetchSearchMovie = async query => {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: '9e9058c72b8ee0828aa8b191435a8696',\n        language: 'en-US',\n        query: `${query}`,\n        // page: 1,\n        // include_adult: false,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: '9e9058c72b8ee0828aa8b191435a8696',\n        language: 'en-US',\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: '9e9058c72b8ee0828aa8b191435a8696',\n        language: 'en-US',\n        page: 1,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n    throw new Error(error);\n  }\n};\n"],"names":["List","styled","Item","Name","Character","CharacterTitle","useState","cast","setCast","movieId","useParams","loading","setLoading","error","setError","useEffect","getCastById","fetchMovieCast","movieCast","console","log","message","Loader","map","cast_id","profile_path","name","character","src","NoImage","alt","axios","fetchTrending","params","api_key","response","data","fetchMovie","id","language","Error","fetchSearchMovie","query","results","fetchMovieReviews","page"],"sourceRoot":""}